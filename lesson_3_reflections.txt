When would you want to use a remote repository rather than keeping all your work local?

When working with other people, it is a good idea to use a remote repository. So that
others can view and add to our work by commiting their own changes. So basically, 
using a remote repository is a great way to collaborate with other people.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

We might not want to pull all the commits done by all the different contributors. This 
would not have been possible if GitHub allowed automatic pull. Manual pulling enable us
to pull only that branch that include our desirable features or contents.

Describe the differences between forks, clones, and branches. When would you use one
instead of another?

Branches are used within a repository to make changes without affecting the main/master
branch.
Clones are used to copy one repository from a remote to local computer or from the local
computer to another location within the computer to make our own changes to the project.
Fork is used to someone's repository from their GitHub account to our own GitHub account.
This helps us to use their project and make our own commits to it without affecting their
copy of the project.

What is the benefit of having a copy of the last known state of the remote stored locally?

Having a copy of last known state of the remote stored locally enable us to know what were
the changes introduced locally which has yet to be synced with the remote. Basically, it 
tells how the remote differs with the local commits.

How would you collaborate without using Git or GitHub? What would be easier, and what would
be harder?

Without GitHub, I would tell my collaaborators to work on different features and later on,
I would have to manually view and add all those changes into my project.
This method is tedious and not even worthy. because, if a bug were to be introduced, I
cannot go back to a previous version of the file if I don't already have it.
Thus using GitHub is lot easier.

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each apoproach have?

When we are working with other collaborators, we might want to show them our changes
before actually adding it to the master branch. In this case we can create a whole
separate branch, add our changes to it, push it and use pull request to share it with
other collaborators. This is helpful because we might not want to have something in the
master branch that is not accepted by other people working on the project.
In cases where we are directly making changes to the master branch,, the overhead of 
making a pull request, which might cause merge conflict, is avoided. 